{
    "comments": [
        {
            "tags": [],
            "description": {
                "full": "<p>Functions \"each\", \"extend\", and \"isFunction\" based on Underscore.js 1.5.2<br />  <a href='http://underscorejs.org'>http://underscorejs.org</a><br />  (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors<br />  Underscore may be freely distributed under the MIT license.</p>\n\n<p>API:<br />  var columnChart = d4.columnChart()<br />    .margin({<br />      top: 15,<br />      right: 10,<br />      bottom: 30,<br />      left: 0<br />    })<br />    .mixin({<br />      'grid': d4.features.grid<br />    }, 0)<br />    .using('bars', function(bars){<br />      bars<br />      .x(function(d){<br />        cumulativeX += d[0];<br />        return this.x(cumulativeX - d[0]);<br />      })<br />      .width(function(d){<br />        return this.x(d[0]);<br />      })<br />    })</p>\n\n<p>d3.select(e[0])<br />    .datum(preparedValues)<br />    .call(columnChart);</p>",
                "summary": "<p>Functions \"each\", \"extend\", and \"isFunction\" based on Underscore.js 1.5.2<br />  <a href='http://underscorejs.org'>http://underscorejs.org</a><br />  (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors<br />  Underscore may be freely distributed under the MIT license.</p>",
                "body": "<p>API:<br />  var columnChart = d4.columnChart()<br />    .margin({<br />      top: 15,<br />      right: 10,<br />      bottom: 30,<br />      left: 0<br />    })<br />    .mixin({<br />      'grid': d4.features.grid<br />    }, 0)<br />    .using('bars', function(bars){<br />      bars<br />      .x(function(d){<br />        cumulativeX += d[0];<br />        return this.x(cumulativeX - d[0]);<br />      })<br />      .width(function(d){<br />        return this.x(d[0]);<br />      })<br />    })</p>\n\n<p>d3.select(e[0])<br />    .datum(preparedValues)<br />    .call(columnChart);</p>"
            },
            "ignore": true,
            "code": "(function() {",
            "fileName": "../src/base.js"
        },
        {
            "tags": [],
            "description": {
                "full": "<p>global d3: false<br />global d4: false</p>",
                "summary": "<p>global d3: false<br />global d4: false</p>",
                "body": ""
            },
            "ignore": true,
            "code": "'use strict';\n\n  var root = this;\n  var breaker = {};\n\n  // Create a safe reference to the d4 object.\n  var d4 = function(obj) {\n    if (obj instanceof d4) {\n      return obj;\n    }\n    if (!(this instanceof d4)) {\n      return new d4(obj);\n    }\n    this.d4Wrapped = obj;\n  };\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = d4;\n    }\n    exports.d4 = d4;\n  } else {\n    root.d4 = d4;\n  }\n\n  d4.features = {};\n  d4.parsers = {};\n\n  var each = d4.each = d4.forEach = function(obj, iterator, context) {\n    var nativeForEach = Array.prototype.forEach,\n      i, len;\n    if (obj === null) {\n      return;\n    }\n    if (nativeForEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length === +obj.length) {\n      for (i = 0, len = obj.length; i < len; i++) {\n        if (iterator.call(context, obj[i], i, obj) === breaker) {\n          return;\n        }\n      }\n    } else {\n      var keys = d3.keys(obj);\n      for (i = 0, len = keys.length; i < len; i++) {\n        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) {\n          return;\n        }\n      }\n    }\n  };\n\n  var isFunction = function(obj) {\n    return !!(obj && obj.constructor && obj.call && obj.apply);\n  };\n\n  var isNotFunction = function(obj) {\n    return !isFunction(obj);\n  };\n\n  var assert = function(message) {\n    throw new Error('[d4] ' + message);\n  };\n\n  var validateBuilder = function(builder) {\n    each(['configure', 'render'], function(funct) {\n      if (!builder[funct] || isNotFunction(builder[funct])) {\n        assert('The supplied builder does not have a ' + funct + ' function');\n      }\n    });\n    return builder;\n  };\n\n  var assignDefaultBuilder = function(defaultBuilder) {\n    if (!this.builder) {\n      this.builder = validateBuilder(defaultBuilder.bind(this)());\n    }\n    return this;\n  };\n\n  var assignDefaults = function(config, defaultBuilder) {\n    if (!defaultBuilder) {\n      assert('No builder defined');\n    }\n    var opts = d4.merge({\n      width: 400,\n      height: 400,\n      features: {},\n      mixins: [],\n      xKey: 'x',\n      yKey: 'y',\n      valueKey: 'y',\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 40\n      }\n    }, config);\n    assignDefaultBuilder.bind(opts)(defaultBuilder);\n    opts.accessors = ['margin', 'width', 'height', 'x', 'y', 'xKey', 'yKey', 'valueKey'].concat(config.accessors || []);\n    return opts;\n  };\n\n  var build = function(data) {\n    if (this.builder) {\n      this.builder.configure(data);\n      this.builder.render(data);\n    } else {\n      assert('No builder defined');\n    }\n  };\n\n  var scaffoldChart = function(selection, data) {\n    this.svg = d3.select(selection).selectAll('svg').data([data]);\n    this.featuresGroup = this.svg.enter().append('svg').append('g')\n      .attr('class', 'featuresGroup')\n      .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')');\n    this.svg.attr('width', this.width).attr('height', this.height).attr('class', 'd4');\n    this.svg.append('defs');\n  };\n\n  var applyScaffold = function(opts) {\n    return function(selection) {\n      selection.each(function(data) {\n        scaffoldChart.bind(opts, this)(data);\n        build.bind(opts)(data);\n      });\n    };\n  };\n\n  var extractOverrides = function(feature) {\n    if (feature.overrides) {\n      return feature.overrides(this);\n    } else {\n      return {};\n    }\n  };\n\n  d4.functor = function(funct) {\n    return isFunction(funct) ? funct : function() {\n      return funct;\n    };\n  };\n\n  // Specify the feature to mixin.\n  // `index` is optional and will place a mixin at a specific 'layer.'\n  d4.mixin = function(feature, index) {\n    if (!feature) {\n      assert('You need to supply an object to mixin.');\n    }\n    var name = d3.keys(feature)[0];\n    var overrides = extractOverrides.bind(this)(feature, name);\n    feature[name] = d4.merge(feature[name](name), overrides);\n    d4.extend(this.features, feature);\n    if (typeof index !== 'undefined') {\n      index = Math.max(Math.min(index, this.mixins.length), 0);\n      this.mixins.splice(index, 0, name);\n    } else {\n      this.mixins.push(name);\n    }",
            "fileName": "../src/base.js"
        },
        {
            "tags": [],
            "description": {
                "full": "<p>FIXME: see fixme note related to the chart accessor functions, the same<br />    problem applies here.</p>",
                "summary": "<p>FIXME: see fixme note related to the chart accessor functions, the same<br />    problem applies here.</p>",
                "body": ""
            },
            "ignore": false,
            "code": "var accessors = this.features[name].accessors;\n    if (accessors) {\n      d3.keys(accessors).forEach(function(functName) {\n        this.features[name][functName] = function(attr) {\n          if (!arguments.length) {\n            return this.features[name].accessors[functName];\n          }\n          this.features[name].accessors[functName] = attr;\n          return this.features[name];\n        }.bind(this);\n      }, this);\n    }\n  };\n\n  d4.mixout = function(name) {\n    if (!name) {\n      assert('A name is required in order to mixout a chart feature.');\n    }\n\n    delete this.features[name];\n    this.mixins = this.mixins.filter(function(val) {\n      return val !== name;\n    });\n  };\n\n  d4.using = function(name, funct) {\n    var feature = this.features[name];\n    if (isNotFunction(funct)) {\n      assert('You must supply a continuation function in order to use a chart feature.');\n    }\n    if (!feature) {\n      assert('Could not find feature: \"' + name + '\", maybe you forgot to mix it in?');\n    } else {\n      funct.bind(this)(feature);\n    }\n  };\n\n  d4.baseChart = function(config, defaultBuilder) {\n    var opts = assignDefaults(config, defaultBuilder);\n    var chart = applyScaffold(opts);",
            "ctx": {
                "type": "declaration",
                "name": "accessors",
                "value": "this.features[name].accessors",
                "string": "accessors"
            },
            "fileName": "../src/base.js"
        },
        {
            "tags": [],
            "description": {
                "full": "<p>FIXME: d4 wraps the inner property object <code>opts</code> in a series of class<br />    functions. For example: <code>chart.width(300)</code> will set the internal<br />    <code>opts.width</code> property to 300. Additionally chart.width() will return 300.<br />    However, this behavior creates ambiguity in API because it is unclear to the<br />    developer which accessors require functions and which can simply supply<br />    values. Ideally the API should support something like this:<br />    chart.xKey('foo') or chart.xKey(function(){ return 'foo'; })<br />    Presently only the latter is allowed, which is confusing.</p>",
                "summary": "<p>FIXME: d4 wraps the inner property object <code>opts</code> in a series of class<br />    functions. For example: <code>chart.width(300)</code> will set the internal<br />    <code>opts.width</code> property to 300. Additionally chart.width() will return 300.<br />    However, this behavior creates ambiguity in API because it is unclear to the<br />    developer which accessors require functions and which can simply supply<br />    values. Ideally the API should support something like this:<br />    chart.xKey('foo') or chart.xKey(function(){ return 'foo'; })<br />    Presently only the latter is allowed, which is confusing.</p>",
                "body": ""
            },
            "ignore": false,
            "code": "chart.accessors = opts.accessors;\n    chart.accessors.forEach(function(accessor) {\n      chart[accessor] = function(attr) {\n        if (!arguments.length) {\n          return opts[accessor];\n        }\n        opts[accessor] = attr;\n        return chart;\n      };\n    });\n\n    chart.using = function(name, funct) {\n      d4.using.bind(opts)(name, funct);\n      return chart;\n    };\n\n    chart.mixin = function(feature, index) {\n      d4.mixin.bind(opts)(feature, index);\n      return chart;\n    };\n\n    chart.mixout = function(feature, index) {\n      d4.mixout.bind(opts)(feature, index);\n      return chart;\n    };\n\n    chart.builder = function(funct) {\n      validateBuilder(funct.bind(chart)(opts));\n      return chart;\n    };\n\n    chart.features = function() {\n      return opts.mixins;\n    };\n\n    return chart;\n  };\n\n  d4.merge = function(options, overrides) {\n    return d4.extend(d4.extend({}, options), overrides);\n  };\n\n  d4.extend = function(obj) {\n    each(Array.prototype.slice.call(arguments, 1), function(source) {\n      if (source) {\n        for (var prop in source) {\n          if (source[prop] && source[prop].constructor &&\n            source[prop].constructor === Object) {\n            obj[prop] = obj[prop] || {};\n            d4.extend(obj[prop], source[prop]);\n          } else {\n            obj[prop] = source[prop];\n          }\n        }\n      }\n    });\n    return obj;\n  };\n\n}).call(this);",
            "ctx": {
                "type": "property",
                "receiver": "chart",
                "name": "accessors",
                "value": "opts.accessors",
                "string": "chart.accessors"
            },
            "fileName": "../src/base.js"
        }
    ],
    "mox": [
        {
            "params": [],
            "name": "",
            "type": "",
            "fileName": "../src/base.js",
            "description": {
                "full": "<p>Functions \"each\", \"extend\", and \"isFunction\" based on Underscore.js 1.5.2<br />  <a href='http://underscorejs.org'>http://underscorejs.org</a><br />  (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors<br />  Underscore may be freely distributed under the MIT license.</p>\n\n<p>API:<br />  var columnChart = d4.columnChart()<br />    .margin({<br />      top: 15,<br />      right: 10,<br />      bottom: 30,<br />      left: 0<br />    })<br />    .mixin({<br />      'grid': d4.features.grid<br />    }, 0)<br />    .using('bars', function(bars){<br />      bars<br />      .x(function(d){<br />        cumulativeX += d[0];<br />        return this.x(cumulativeX - d[0]);<br />      })<br />      .width(function(d){<br />        return this.x(d[0]);<br />      })<br />    })</p>\n\n<p>d3.select(e[0])<br />    .datum(preparedValues)<br />    .call(columnChart);</p>",
                "summary": "<p>Functions \"each\", \"extend\", and \"isFunction\" based on Underscore.js 1.5.2<br />  <a href='http://underscorejs.org'>http://underscorejs.org</a><br />  (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors<br />  Underscore may be freely distributed under the MIT license.</p>",
                "body": "<p>API:<br />  var columnChart = d4.columnChart()<br />    .margin({<br />      top: 15,<br />      right: 10,<br />      bottom: 30,<br />      left: 0<br />    })<br />    .mixin({<br />      'grid': d4.features.grid<br />    }, 0)<br />    .using('bars', function(bars){<br />      bars<br />      .x(function(d){<br />        cumulativeX += d[0];<br />        return this.x(cumulativeX - d[0]);<br />      })<br />      .width(function(d){<br />        return this.x(d[0]);<br />      })<br />    })</p>\n\n<p>d3.select(e[0])<br />    .datum(preparedValues)<br />    .call(columnChart);</p>"
            }
        },
        {
            "params": [],
            "name": "",
            "type": "",
            "fileName": "../src/base.js",
            "description": {
                "full": "<p>global d3: false<br />global d4: false</p>",
                "summary": "<p>global d3: false<br />global d4: false</p>",
                "body": ""
            }
        },
        {},
        {}
    ],
    "categories": [],
    "files": [
        {
            "tag": "../src/base.js",
            "moxComments": [
                {
                    "params": [],
                    "name": "",
                    "type": "",
                    "fileName": "../src/base.js",
                    "description": {
                        "full": "<p>Functions \"each\", \"extend\", and \"isFunction\" based on Underscore.js 1.5.2<br />  <a href='http://underscorejs.org'>http://underscorejs.org</a><br />  (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors<br />  Underscore may be freely distributed under the MIT license.</p>\n\n<p>API:<br />  var columnChart = d4.columnChart()<br />    .margin({<br />      top: 15,<br />      right: 10,<br />      bottom: 30,<br />      left: 0<br />    })<br />    .mixin({<br />      'grid': d4.features.grid<br />    }, 0)<br />    .using('bars', function(bars){<br />      bars<br />      .x(function(d){<br />        cumulativeX += d[0];<br />        return this.x(cumulativeX - d[0]);<br />      })<br />      .width(function(d){<br />        return this.x(d[0]);<br />      })<br />    })</p>\n\n<p>d3.select(e[0])<br />    .datum(preparedValues)<br />    .call(columnChart);</p>",
                        "summary": "<p>Functions \"each\", \"extend\", and \"isFunction\" based on Underscore.js 1.5.2<br />  <a href='http://underscorejs.org'>http://underscorejs.org</a><br />  (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors<br />  Underscore may be freely distributed under the MIT license.</p>",
                        "body": "<p>API:<br />  var columnChart = d4.columnChart()<br />    .margin({<br />      top: 15,<br />      right: 10,<br />      bottom: 30,<br />      left: 0<br />    })<br />    .mixin({<br />      'grid': d4.features.grid<br />    }, 0)<br />    .using('bars', function(bars){<br />      bars<br />      .x(function(d){<br />        cumulativeX += d[0];<br />        return this.x(cumulativeX - d[0]);<br />      })<br />      .width(function(d){<br />        return this.x(d[0]);<br />      })<br />    })</p>\n\n<p>d3.select(e[0])<br />    .datum(preparedValues)<br />    .call(columnChart);</p>"
                    }
                },
                {
                    "params": [],
                    "name": "",
                    "type": "",
                    "fileName": "../src/base.js",
                    "description": {
                        "full": "<p>global d3: false<br />global d4: false</p>",
                        "summary": "<p>global d3: false<br />global d4: false</p>",
                        "body": ""
                    }
                }
            ]
        }
    ],
    "name": "d4",
    "version": "0.1.0"
}
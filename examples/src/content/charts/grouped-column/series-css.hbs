---
title: Series and Items CSS
concepts:
  - Graphic Design
---

<h5>{{title}}</h5>
<p>
  d4 aims to make styling the charts using CSS as robust as possible. Towards that
  end, d4 adds several generated CSS classes to various elements of the chart
  as it renders. This page gives several examples of how you can radically alter
  the visual intent of the chart by utilizing the various classes available to you.
  The important take away here is that controlling the series colors changes the
  <em>story</em> your charts are telling. You will want to choose the correct
  visual representation of your series data to support the point you are trying
  to make.
</p>
<p>
  The first example uses the auto-incrementing <code class="language-css">.item</code>
  class. As items are added to the chart a new item class will be added to the
  new series item e.g. <code class="language-css">.item0, .item1, .item2</code>.
</p>

<p>
  The second example uses the auto-incrementing <code class="language-css">.series</code> class.
  As series are added to the chart a new series class will be created e.g.
  <code class="language-css">.series0, .series1, .series2</code>.
</p>
<p>
  The third example combines the auto-incrementing <code class="language-css">.series</code>
  and <code class="language-css">.item</code> classes together.
</p>
<hr/>
<script type="text/javascript" charset="utf-8" id='source_code'>
'use strict';

$(document).ready(function(){
  var data = [
      { year: '2010', unitsSold:-100, salesman : 'Bob' },
      { year: '2011', unitsSold:200, salesman : 'Bob' },
      { year: '2012', unitsSold:300, salesman : 'Bob' },
      { year: '2013', unitsSold:400, salesman : 'Bob' },
      { year: '2014', unitsSold:500, salesman : 'Bob' },
      { year: '2010', unitsSold:100, salesman : 'Gina' },
      { year: '2011', unitsSold:100, salesman : 'Gina' },
      { year: '2012', unitsSold:-100, salesman : 'Gina' },
      { year: '2013', unitsSold:500, salesman : 'Gina' },
      { year: '2014', unitsSold:600, salesman : 'Gina' },
      { year: '2010', unitsSold:400, salesman : 'Average' },
      { year: '2011', unitsSold:0, salesman : 'Average' },
      { year: '2012', unitsSold:400, salesman : 'Average' },
      { year: '2013', unitsSold:400, salesman : 'Average' },
      { year: '2014', unitsSold:400, salesman : 'Average' }
    ];

  var parsedData = d4.parsers.nestedGroup()
    .x('year')
    .y('unitsSold')
    .value('unitsSold')(data);

  var chart = d4.charts.groupedColumn()
  .width($('#items').width())
  .x(function(x){
    x.key('year');
  })
  .y(function(y){
    y.key('unitsSold');
  })
  .groupsOf(parsedData.data[0].values.length);

  d3.select('#items')
  .datum(parsedData.data)
  .call(chart);

  d3.select('#series')
  .datum(parsedData.data)
  .call(chart);

  d3.select('#series-item')
  .datum(parsedData.data)
  .call(chart);

});

</script>
<h6>Item Example</h6>
<div id="items"></div>

<h6>Series Example</h6>
<div id="series"></div>

<h6>Series &amp; Item Example</h6>
<div id="series-item"></div>

<h6>JavaScript Code</h6>
<pre><code id="code" class="language-javascript"></code></pre>